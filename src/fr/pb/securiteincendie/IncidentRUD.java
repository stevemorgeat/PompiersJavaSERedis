/*
 *
 */
package fr.pb.securiteincendie;

import fr.pb.global.Globale;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import redis.clients.jedis.Jedis;

/**
 *
 * @author pascal
 */
public class IncidentRUD extends javax.swing.JFrame {

    private final Jedis jedis;
    private DefaultTableModel idtm;
    private Map<String, String> mapLieuxInverse;
    private Set<String> setCauses;
    private Map<String, String> mapPersonnes;

    /**
     * Creates new form
     */
    public IncidentRUD() {
        initComponents();

        jedis = Globale.getConnexionRedis();
        remplirTable();
        remplirListes();

        setTitle("RUD Incidents");
        setLocationRelativeTo(null);
        setVisible(true);
    } /// constructeur

    /**
     *
     */
    private void remplirTable() {

        try {
            idtm = (DefaultTableModel) jTableIncidents.getModel();

            //Recuperation du nombre d'incidents car demandé comme arg pour lrange
            long nbIncidents = jedis.llen("IncidentsListe");
            //Recuperation de tout les incidents dans une liste
            List<String> listeIncidents = jedis.lrange("IncidentsListe", 0, nbIncidents);

            //On boucle sur la longueur de la liste
            for (int i = 0; i < listeIncidents.size(); i++) {
                //Recuperation de la liste dans une map
                String incidents = listeIncidents.get(i);
                Map<String, String> mapIncidents = jedis.hgetAll(incidents);
                //Taille de la map et on recupere les champs pour les afficher dans la table
                int lIncidents = mapIncidents.size();
                //+1 pour le flag
                String[] tChamps = new String[lIncidents + 1];
                tChamps[0] = "";// colonne flag
                tChamps[1] = mapIncidents.get("id");// id de l'incident
                tChamps[2] = mapIncidents.get("date");
                tChamps[3] = mapIncidents.get("lieu");
                tChamps[4] = mapIncidents.get("cause");
                tChamps[5] = mapIncidents.get("personne");
                idtm.addRow(tChamps);
            }

            jLabelMessage.setText("Chargement réussi !!");

        } catch (Exception e) {
            jLabelMessage.setText(e.getMessage());
        }

    } /// remplirTable

    /**
     *
     */
    private void remplirListes() {

        try {
            //Recuperation des lieux
            Map<String, String> mapLieux = jedis.hgetAll("Lieux");
            //Inversion de id/lieu par lieu/id
            mapLieuxInverse = new TreeMap<>();
            String cle;
            String valeur;
            for (Map.Entry<String, String> entry : mapLieux.entrySet()) {
                cle = entry.getKey();
                valeur = entry.getValue();
                mapLieuxInverse.put(valeur, cle);
                jComboBoxLieux.addItem(valeur);
            }

            //Recuperation des causes
            setCauses = jedis.smembers("Causes");
            for (String lsCause : setCauses) {
                jComboBoxCauses.addItem(lsCause);
            }

            //Recuperation des personnes
            mapPersonnes = jedis.hgetAll("Personnes");
            Set<String> setNoms = mapPersonnes.keySet();
            for (String nom : setNoms) {
                jComboBoxPersonnes.addItem(nom);
            }

        } catch (Exception e) {
            jLabelMessage.setText(e.getMessage());
        }

    } /// remplirListes

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIncidents = new javax.swing.JTable();
        jLabelMessage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDateHeure = new javax.swing.JTextField();
        jComboBoxLieux = new javax.swing.JComboBox();
        jComboBoxCauses = new javax.swing.JComboBox();
        jButtonSupprimer = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonCommit = new javax.swing.JButton();
        jButtonRollback = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxPersonnes = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabelId = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTableIncidents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flag", "Id", "Date et heure", "Lieu", "Cause", "Personne"
            }
        ));
        jTableIncidents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableIncidentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableIncidents);

        jLabelMessage.setText("Message");

        jLabel1.setText("Date et heure");

        jLabel2.setText("Lieu");

        jLabel3.setText("Cause");

        jTextFieldDateHeure.setText("12/12/2016 08:08:08");
        jTextFieldDateHeure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDateHeureActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonCommit.setText("Commit");
        jButtonCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCommitActionPerformed(evt);
            }
        });

        jButtonRollback.setText("Rollback");
        jButtonRollback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRollbackActionPerformed(evt);
            }
        });

        jLabel4.setText("Personne");

        jLabel5.setText("Id");

        jLabelId.setText("id");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMessage)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonSupprimer)
                                .addGap(27, 27, 27)
                                .addComponent(jButtonModifier)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCommit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRollback))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(87, 87, 87)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelId)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldDateHeure, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                        .addComponent(jComboBoxLieux, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxCauses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxPersonnes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabelId))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldDateHeure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jComboBoxLieux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addComponent(jComboBoxCauses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxPersonnes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSupprimer)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonCommit)
                    .addComponent(jButtonRollback))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabelMessage)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        int liRow = jTableIncidents.getSelectedRow();
        if (liRow < 0) {
            jLabelMessage.setText("Vous devez sélectionner un incident !!");
        } else {
            jTableIncidents.setValueAt("-", liRow, 0);
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        int liRow = jTableIncidents.getSelectedRow();
        if (liRow >= 0) {
            jTableIncidents.setValueAt("v", liRow, 0);
            jTableIncidents.setValueAt(jLabelId.getText(), liRow, 1);
            jTableIncidents.setValueAt(jTextFieldDateHeure.getText(), liRow, 2);
            jTableIncidents.setValueAt(jComboBoxLieux.getSelectedItem().toString(), liRow, 3);
            jTableIncidents.setValueAt(jComboBoxCauses.getSelectedItem().toString(), liRow, 4);
            jTableIncidents.setValueAt(jComboBoxPersonnes.getSelectedItem().toString(), liRow, 5);
            jLabelMessage.setText("modification pré-effectuée");
        } else {
            jLabelMessage.setText("aucune ligne sélectionnée");
        }

    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCommitActionPerformed
        String lsDateHeure;
        String lsLieuCause;

        // Récupération du nombre de lignes de la jtable
        int liRows = jTableIncidents.getRowCount();
        // Boucle sur les lignes dans la jtable
        for (int i = liRows - 1; i >= 0; i--) {

            //Si flag = -
            if (jTableIncidents.getValueAt(i, 0).toString().equals("-")) {
                //Suppresion dans la liste des incidents , lrem (nomdelaliste, nombres de champs de la liste a supprimer, nom du champs
                jedis.lrem("IncidentsListe", 1, "Incident" + jTableIncidents.getValueAt(i, 1).toString());
                System.out.println("je vais supprimer la ligne du modele");
                idtm.removeRow(i);
            }

            //Si flag =  v 
            if (jTableIncidents.getValueAt(i, 0).toString().equals("v")) {
                Map<String, String> map = new HashMap();
                //on remplit le map avec les valeurs de chaque cellules de la ligne en question sans le flag biensursout    
                map.put("id", jTableIncidents.getValueAt(i, 1).toString());
                map.put("date", jTableIncidents.getValueAt(i, 2).toString());
                map.put("lieu", jTableIncidents.getValueAt(i, 3).toString());
                map.put("cause", jTableIncidents.getValueAt(i, 4).toString());
                map.put("personne", jTableIncidents.getValueAt(i, 5).toString());
                // modif du map qui porte le nom incident+NumeroId auquel on affecte le nouveau map modifier
                jedis.hmset("Incident" + jTableIncidents.getValueAt(i, 1).toString(), map);
            }

            jTableIncidents.setValueAt("", i, 0);

        }
    }//GEN-LAST:event_jButtonCommitActionPerformed

    private void jButtonRollbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRollbackActionPerformed
        //int liRows = jTableIncidents.getRowCount();
        //for (int i = 0; i < liRows; i++) {
        //  jTableIncidents.setValueAt("", i, 0);
        //}
        jLabelMessage.setText("le Rollback n'est pas encore géré...");
    }//GEN-LAST:event_jButtonRollbackActionPerformed

    private void jTableIncidentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableIncidentsMouseClicked
        //
        int liRow = jTableIncidents.getSelectedRow();
        jLabelId.setText(jTableIncidents.getValueAt(liRow, 1).toString());
        jTextFieldDateHeure.setText(jTableIncidents.getValueAt(liRow, 2).toString());
        jComboBoxLieux.setSelectedItem(jTableIncidents.getValueAt(liRow, 3).toString());
        jComboBoxCauses.setSelectedItem(jTableIncidents.getValueAt(liRow, 4).toString());
        jComboBoxPersonnes.setSelectedItem(jTableIncidents.getValueAt(liRow, 5).toString());
    }//GEN-LAST:event_jTableIncidentsMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // 
        JFrame f = Globale.getFenetre();
        f.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void jTextFieldDateHeureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDateHeureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDateHeureActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IncidentRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IncidentRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IncidentRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IncidentRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IncidentRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCommit;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRollback;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JComboBox jComboBoxCauses;
    private javax.swing.JComboBox jComboBoxLieux;
    private javax.swing.JComboBox jComboBoxPersonnes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableIncidents;
    private javax.swing.JTextField jTextFieldDateHeure;
    // End of variables declaration//GEN-END:variables
}
