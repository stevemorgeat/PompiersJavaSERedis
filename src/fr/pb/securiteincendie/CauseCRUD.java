/*
 Causes : Set
 */
package fr.pb.securiteincendie;

import fr.pb.global.Globale;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import redis.clients.jedis.Jedis;

/**
 *
 * @author jessica
 */
public class CauseCRUD extends javax.swing.JFrame {

    private final Jedis jedis;
    private DefaultTableModel idtm;
    private final List<Object[]> lCausePrimitive = new ArrayList();

    /**
     * Creates new form CauseCRUD
     */
    public CauseCRUD() {
        initComponents();

        setTitle("CRUD Cause");
        setLocationRelativeTo(null);
        setVisible(true);

        jedis = Globale.getConnexionRedis();

        // Remplissage de la jTable
        remplirTable();

    } /// Constructeur

    /**
     *
     */
    private void remplirTable() {

        try {
            Object[] tLigne;
            idtm = (DefaultTableModel) jTableCauses.getModel();
            // Liste les éléments du set
            Set<String> set = jedis.smembers("Causes");
            // Boucle sur le set pour récupérer les valeurs
            for (String lsCause : set) {
                tLigne = new Object[2];
                tLigne[0] = "";
                tLigne[1] = lsCause;
                // Mise à jour jtable
                idtm.addRow(tLigne);
                // Stockage des valeurs initiales
                lCausePrimitive.add(tLigne);
            }
        } catch (Exception e) {
            jLabelMessage.setText(e.getMessage());
        }

    } /// remplirTable

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButtonAjouter = new javax.swing.JButton();
        jLabelMessage = new javax.swing.JLabel();
        jTextFieldCause = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCauses = new javax.swing.JTable();
        jButtonCLS = new javax.swing.JButton();
        jButtonCommit = new javax.swing.JButton();
        jButtonRollback = new javax.swing.JButton();
        jButtonModifier = new javax.swing.JButton();
        jButtonSupprimer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setText("Cause");

        jButtonAjouter.setText("Ajouter");
        jButtonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterActionPerformed(evt);
            }
        });

        jTextFieldCause.setText("Inondation");

        jTableCauses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flag", "Cause"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCauses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCausesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCauses);
        if (jTableCauses.getColumnModel().getColumnCount() > 0) {
            jTableCauses.getColumnModel().getColumn(0).setResizable(false);
        }

        jButtonCLS.setText("CLS");
        jButtonCLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCLSActionPerformed(evt);
            }
        });

        jButtonCommit.setText("Commit");
        jButtonCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCommitActionPerformed(evt);
            }
        });

        jButtonRollback.setText("Rollback");
        jButtonRollback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRollbackActionPerformed(evt);
            }
        });

        jButtonModifier.setText("Modifier");
        jButtonModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierActionPerformed(evt);
            }
        });

        jButtonSupprimer.setText("Supprimer");
        jButtonSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonCLS)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldCause, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jButtonModifier)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSupprimer))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelMessage)
                            .addComponent(jButtonCommit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonRollback)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCLS)
                    .addComponent(jButtonAjouter)
                    .addComponent(jButtonModifier)
                    .addComponent(jButtonSupprimer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCommit)
                    .addComponent(jButtonRollback))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelMessage)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterActionPerformed
        // Ajouter une cause
        // Recupération de la cause inscrite dans le champs
        String lsCause = jTextFieldCause.getText();
        // Test si le champs est vide
        if (lsCause.isEmpty()) {
            jLabelMessage.setText("Saisies obligatoires");
        } else {
            // Récupération de la cause et insertion dans la jTable
            String[] tLigne = new String[2];
            tLigne[0] = "+";
            tLigne[1] = lsCause;
            idtm.addRow(tLigne);
        }
    }//GEN-LAST:event_jButtonAjouterActionPerformed

    private void jButtonCLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCLSActionPerformed
        // Remise à zéro du champs
        jTextFieldCause.setText("");
    }//GEN-LAST:event_jButtonCLSActionPerformed

    private void jButtonCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCommitActionPerformed
        // Validation définitive dans la base
        try {
            String lsFlag;
            String lsCause;
            // Récupération du nombre de lignes de la jtable
            int liRow = jTableCauses.getRowCount();
            // Boucle sur les lignes dans la jtable
            for (int i = liRow - 1; i >= 0; i--) {
                // Recupération de la valeur dans flag
                lsFlag = jTableCauses.getValueAt(i, 0).toString();
                // Recupération de la valeur dans cause
                lsCause = jTableCauses.getValueAt(i, 1).toString();
                // Test si le flag est égal à +
                if (lsFlag.equals("+")) {
                    // Ajout dans la base
                    jedis.sadd("Causes", lsCause);
                    // Mise à jour jtable
                    idtm.setValueAt("", i, 0);
                }
                // Test si le flag est égal à -
                if (lsFlag.equals("-")) {
                    // Suppression dans la base
                    jedis.srem("Causes", lsCause);
                    // Suppression de la ligne dans la jtable
                    idtm.removeRow(i);
                }
                // Test si le flag est égal à v
                if (lsFlag.equals("v")) {
                    // Suppression de l'ancienne valeur dans la base
                    jedis.srem("Causes", lCausePrimitive.get(i)[1].toString());
                    // Ajout de la nouvelle valeur dans la base
                    jedis.sadd("Causes", lsCause);
                    // Mise à jour jtable
                    idtm.setValueAt("", i, 0);
                }
            }
            jLabelMessage.setText("Mise à jour dans la base de données réussie");
        } catch (Exception e) {
            jLabelMessage.setText(e.getMessage());
        }
    }//GEN-LAST:event_jButtonCommitActionPerformed

    private void jButtonRollbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRollbackActionPerformed
        // Annulation
        String lsFlag;
        // Récupération du nombre de lignes de la jtable
        int liRows = jTableCauses.getRowCount();
        // Boucle sur les lignes dans la jtable
        for (int i = liRows - 1; i >= 0; i--) {
            // Recupération de la valeur dans flag
            lsFlag = jTableCauses.getValueAt(i, 0).toString();
            // Test si le flag est égal à +
            if (lsFlag.equals("+")) {
                // Suppression de la ligne dans la jtable
                idtm.removeRow(i);
            }
            // Test si le flag est égal à -
            if (lsFlag.equals("-")) {
                // Mise à jour jtable
                idtm.setValueAt("", i, 0);
            }
            // Test si le flag est égal à v
            if (lsFlag.equals("v")) {
                // Boucle sur la liste des valeurs primitives
                for (int j = 0; j < lCausePrimitive.size(); j++) {
                    // Récupération dans un tableau de String
                    String[] tLigne = (String[]) lCausePrimitive.get(j);
                    // Test si la valeur primitive est égale à la nouvelle valeur
                    if (tLigne[1].equals(jTableCauses.getValueAt(i, 1).toString())) {
                        // Mise à jour jtable
                        idtm.setValueAt(tLigne[0], i, 1);
                    }
                }
                // Mise à jour jtable
                idtm.setValueAt("", i, 0);
            }
            jLabelMessage.setText("Modifications annulées");
        }
    }//GEN-LAST:event_jButtonRollbackActionPerformed

    private void jTableCausesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCausesMouseClicked
        // Affichage de la cause dans le champs si on clique sur une cause dans la liste
        jTextFieldCause.setText(jTableCauses.getValueAt(jTableCauses.getSelectedRow(), 1).toString());
    }//GEN-LAST:event_jTableCausesMouseClicked

    private void jButtonModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierActionPerformed
        // Modifier une cause
        // Récupération de l'index de la ligne selectionnée
        int liRow = jTableCauses.getSelectedRow();
        // Test si une ligne est selectionnée
        if (liRow >= 0) {
            // Test si le champs flag est vide ou égal à -
            if (jTableCauses.getValueAt(liRow, 0).toString().equals("") || jTableCauses.getValueAt(liRow, 0).toString().equals("-")) {
                // Insertion dans la jtable d'un v dans le champs flag
                jTableCauses.setValueAt("v", liRow, 0);
                // Insertion dans la jtable de la valeur dans le champs
                jTableCauses.setValueAt(jTextFieldCause.getText(), liRow, 1);
            }
        } else {
            jLabelMessage.setText("Vous devez sélectionner une ligne !");
        }

    }//GEN-LAST:event_jButtonModifierActionPerformed

    private void jButtonSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerActionPerformed
        // Suppression d'une cause
        // Récupération de l'index de la ligne selectionnée
        int liRow = jTableCauses.getSelectedRow();
        // Test si une ligne est selectionnée
        if (liRow >= 0) {
            // Test si le champs flag contient un +
            if (jTableCauses.getValueAt(liRow, 0).toString().equals("+")) {
                // Suppression de la ligne
                idtm.removeRow(liRow);
            } else {
                // Insertion d'un - dans le champs flag
                idtm.setValueAt("-", liRow, 0);
            }
        } else {
            jLabelMessage.setText("Vous devez sélectionner une ligne !");
        }
    }//GEN-LAST:event_jButtonSupprimerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //
        JFrame f = Globale.getFenetre();
        f.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CauseCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CauseCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CauseCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CauseCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CauseCRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAjouter;
    private javax.swing.JButton jButtonCLS;
    private javax.swing.JButton jButtonCommit;
    private javax.swing.JButton jButtonModifier;
    private javax.swing.JButton jButtonRollback;
    private javax.swing.JButton jButtonSupprimer;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCauses;
    private javax.swing.JTextField jTextFieldCause;
    // End of variables declaration//GEN-END:variables
}
